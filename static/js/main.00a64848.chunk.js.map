{"version":3,"sources":["assets/img/logo.png","assets/img/partners/polymtl.png","assets/img/partners/aep.png","assets/img/partners/protocase.png","assets/img/partners/ntx.png","assets/img/partners/diptrace.png","assets/data/hypnogram-predicted.csv","assets/data/hypnogram-electrophysiologist.csv","assets/data/hypnogram-openbci-electrophysiologist.csv","assets/data/hypnogram-openbci-predicted.csv","components/navbar/navbar.js","components/header.js","components/footer/partners.js","components/footer/footer.js","components/d3component.js","components/emoji.js","components/wip_warning.js","d3/hypnogram/hypnogram.js","d3/hypnogram/line-charts.js","d3/hypnogram/preproc.js","d3/hypnogram/mouse-over.js","d3/spectrogram/preproc.js","d3/common/duration.js","d3/spectrogram/stages-charts.js","d3/spectrogram/initSpectrogram.js","d3/spectrogram/legend.js","d3/bar_chart/preproc.js","d3/bar_chart/legend.js","d3/bar_chart/stages-charts.js","d3/common/constantes.js","d3/bar_chart/transition.js","d3/bar_chart/initBarChart.js","d3/spectrogram/spectrogram.js","d3/bar_chart/barChart.js","views/sleep_analysis/stacked_bar_chart_scrollytelling.js","views/sleep_analysis/sleep_analysis.js","views/performance/performance.js","components/scroll_to_top.js","index.js","assets/data/hypnogram.csv"],"names":["module","exports","OutsideLink","href","iconClass","linkName","tooltipText","tooltipID","NavItem","NavLink","className","id","target","UncontrolledTooltip","delay","defaultProps","Navbar","props","navbarstrapRef","React","createRef","Headroom","this","init","ref","expand","Container","NavbarBrand","to","tag","Link","alt","src","Logo","Nav","navbar","text","Component","Header","sizeClass","shapeQty","title","subtitle","description","_","times","i","key","Col","lg","preserveAspectRatio","viewBox","x","y","points","Partner","img","width","style","Partners","Row","Polymtl","AEP","NTX","Protocase","Diptrace","PlatformButton","color","Button","Copyright","Date","getFullYear","rel","Navfooter","Footer","md","D3Component","callback","svg","Emoji","symbol","label","role","aria-label","aria-hidden","WIPWarning","Alert","createHypnogram","containerNode","data","chartTitle","hypnogramNames","comparativeColors","d3","sleepLabels","margin","top","right","bottom","left","dimensions","height","range","Array","keys","map","initializeScales","xAxis","tickFormat","yAxis","scale","initializeAxes","g","attr","append","createDrawingGroup","line","d","timestamp","sleep_stage","curve","createLine","Promise","all","hypnoData","then","forEach","hypno","row","date","getUTCFullYear","getUTCMonth","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","parseTimestampToDate","raw_data_labels_value","Object","find","parseInt","convertValuesToLabels","zip","convertSources","dates","values","datum","domain","domainX","domainY","colorDomain","numberHypnogram","length","colors","slice","name","domainColor","bisectTime","lineHover","dateHover","circleHover","selectAll","enter","textHover","on","mouse","timestamps","currentTimeDate","invert","idx","epochIdx","currentValue","getHoveredData","createMouseOver","g_chart","createHypnogramChart","call","createAxes","createTitle","legendData","createLegend","createSingleHypnogram","hypnogramDataSleepEDF","createComparativeHypnogram","isEqual","hypnogramDataPredicted","hypnogramDataPredictedOpenBCI","hypnogramDataOpenBCIElectrophysiologist","hypnogramDataElectrophysiologist","sources","extent","Intensity","getHoursFromIndex","TIMESTAMP_DURATION","getDurationString","duration","hours","Math","floor","minutes","seconds","addZero","getDurationStringHM","Number","h","m","getToolTipText","toFixed","Frequency","Timestamp","DATUM_PER_TIMESTAMP","FREQUENCY_BINS","initSpectrogram","node","colorInterpolator","yColor","yAxisScale","ticks","spectrogram","gLegend","interpolator","tooltip","tip","offset","frequencies","Frequencies","binTotal","jdx","push","nodeData","intensity","currFrequencyBin","currTimestampBin","kdx","ldx","timeStamp","ceil","createSources","bandwidth","show","hide","createSpectrgramChart","html","interpolate","index","scaleIndex","legend","states","xFocus","yFocus","convertSource","statesOrder","totalTimestamps","currentStageDebut","currentStage","stagePortion","stageText","stage","indexOf","currentStageEnd","calculateStagesPortion","stageProportionCounts","totalTimestamp","findFirstStageIndex","firstIndexes","findIndex","element","barLegend","createStackedBarChart","getHours","getMinutes","hf","mf","hourDiff","getStackedToolTipText","totalStagesPortion","totalTimeStamp","createStagesDurationAxes","sleepTotal","getTime","newscale","createSmallStackedBarChart","pourcentageData","stackedBar","transition","a","value","reduce","b","firstCallback","secondCallback","thirdCallback","fourthCallback","fifthCallback","addTransitions","gSecondBarChart","gThirdBarChart","barHeight","tipStacked","firstStageIndex","totalStagePortion","firstTransition","secondTransition","thirdTransition","fourthTransition","fifthTransition","remove","axis","select","round","initializeBarChart","transitions","useTransitions","translationHeight","tickSize","gBarChart","barChartData","firstStagesIndex","createSpectrogram","countainerNode","spectroHeight","canvisHeight","barChart","spectrogramFPZ","spectrogramPZ","createBarChart","StackedBarChartScrollyTelling","position","Card","CardBody","onEnter","SleepAnalysis","ClassificationReport","rows","Table","size","responsive","el","j","Performance","ScrollToTop","prevProps","location","pathname","window","scrollTo","children","withRouter","ReactDOM","render","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.00a64848.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bcea7572.png\";","module.exports = __webpack_public_path__ + \"static/media/polymtl.3034d991.png\";","module.exports = __webpack_public_path__ + \"static/media/aep.fda414f1.png\";","module.exports = __webpack_public_path__ + \"static/media/protocase.53bfde7a.png\";","module.exports = __webpack_public_path__ + \"static/media/ntx.bdd09ab5.png\";","module.exports = __webpack_public_path__ + \"static/media/diptrace.e3ba6abc.png\";","module.exports = __webpack_public_path__ + \"static/media/hypnogram-predicted.172957b9.csv\";","module.exports = __webpack_public_path__ + \"static/media/hypnogram-electrophysiologist.b8cc6e10.csv\";","module.exports = __webpack_public_path__ + \"static/media/hypnogram-openbci-electrophysiologist.53f2765d.csv\";","module.exports = __webpack_public_path__ + \"static/media/hypnogram-openbci-predicted.bf6d0c34.csv\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Headroom from \"headroom.js\";\r\nimport {\r\n  Navbar as NavbarStrap,\r\n  Container,\r\n  NavbarBrand,\r\n  NavItem,\r\n  Nav,\r\n  NavLink,\r\n  UncontrolledTooltip,\r\n} from \"reactstrap\";\r\n\r\nimport Logo from \"assets/img/logo.png\";\r\nimport text from \"./text.json\";\r\n\r\nconst OutsideLink = ({href, iconClass, linkName, tooltipText, tooltipID}) => {\r\n  return (\r\n    <NavItem>\r\n      <NavLink\r\n        className=\"nav-link-icon\"\r\n        href={href}\r\n        id={tooltipID}\r\n        target=\"_blank\"\r\n      >\r\n        <i className={`fa ${iconClass}`} />\r\n        <span className=\"nav-link-inner--text d-lg-none ml-2\"> {linkName} </span>\r\n      </NavLink>\r\n      <UncontrolledTooltip delay={0} target={tooltipID}>\r\n        {tooltipText}\r\n      </UncontrolledTooltip>\r\n    </NavItem>\r\n  );\r\n};\r\n\r\nOutsideLink.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  iconClass: PropTypes.string,\r\n  linkName: PropTypes.string,\r\n  tooltipText: PropTypes.string,\r\n  tooltipID: PropTypes.string.isRequired,\r\n};\r\n\r\nOutsideLink.defaultProps = {\r\n  iconClass: \"\",\r\n  linkName: \"\",\r\n  tooltipText: \"\",\r\n};\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.navbarstrapRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const headroom = new Headroom(this.navbarstrapRef);\r\n    headroom.init();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div\r\n        ref={ref => this.navbarstrapRef = ref}\r\n        className=\"navbar-main navbar-transparent navbar-light headroom\"\r\n      >\r\n        <NavbarStrap\r\n          id=\"navbar-main\"\r\n          expand=\"lg\"\r\n        >\r\n          <Container>\r\n            <NavbarBrand className=\"mr-lg-5\" to=\"/\" tag={Link}>\r\n              <img alt=\"Polydodo\" src={Logo} />\r\n            </NavbarBrand>\r\n\r\n            <Nav className=\"navbar-nav-hover align-items-lg-center\" navbar>\r\n              <NavItem>\r\n                <NavLink to=\"/\" tag={Link}> {text[\"navbar_home\"]} </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/record-my-sleep\" tag={Link}> {text[\"navbar_record\"]} </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/analyze-my-sleep\" tag={Link}> {text[\"navbar_analyze\"]} </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/performance\" tag={Link}> {text[\"navbar_performance\"]} </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n\r\n            <Nav className=\"align-items-lg-center ml-lg-auto\" navbar>\r\n              <OutsideLink\r\n                href=\"https://www.facebook.com/PolyCortex/\"\r\n                iconClass=\"fa-facebook-square\"\r\n                linkName=\"Facebook\"\r\n                tooltipText={text[\"navbar_facebook_tooltip\"]}\r\n                tooltipID=\"tooltip333589074\"\r\n              />\r\n              <OutsideLink\r\n                href=\"https://www.instagram.com/polycortex/\"\r\n                iconClass=\"fa-instagram\"\r\n                linkName=\"Instagram\"\r\n                tooltipText={text[\"navbar_instagram_tooltip\"]}\r\n                tooltipID=\"tooltip356693867\"\r\n              />\r\n              <OutsideLink\r\n                href=\"https://github.com/PolyCortex\"\r\n                iconClass=\"fa-github\"\r\n                linkName=\"Github\"\r\n                tooltipText={text[\"navbar_github_tooltip\"]}\r\n                tooltipID=\"tooltip112445449\"\r\n              />\r\n            </Nav>\r\n          </Container>\r\n        </NavbarStrap>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Container } from \"reactstrap\";\r\n\r\nconst Header = ({\r\n  sizeClass,\r\n  shapeQty,\r\n  title,\r\n  subtitle,\r\n  description\r\n}) => {\r\n\r\n  return (\r\n    <section className={`section section-lg section-shaped ${sizeClass}`}>\r\n      <div className=\"shape shape-style-1 shape-dark\">\r\n        {_.times(shapeQty, i => <span key={i} />)}\r\n      </div>\r\n      <Container>\r\n        <div className=\"col px-0\">\r\n          <Col lg=\"6\">\r\n            <h1 className=\"display-3 text-white\">\r\n              {title}\r\n              <span>{subtitle}</span>\r\n            </h1>\r\n            <p className=\"lead text-white\">{description}</p>\r\n          </Col>\r\n        </div>\r\n      </Container>\r\n\r\n      <div className=\"separator separator-bottom separator-skew\">\r\n        <svg preserveAspectRatio=\"none\" viewBox=\"0 0 2560 100\" x=\"0\" y=\"0\" >\r\n          <polygon className=\"fill-white\" points=\"2560 0 2560 110 0 100\" />\r\n        </svg>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  sizeClass: PropTypes.string,\r\n  shapeQty: PropTypes.number,\r\n  title: PropTypes.string,\r\n  subtitle: PropTypes.string,\r\n  description: PropTypes.string,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  sizeClass: \"pb-150\",\r\n  shapeQty: 5,\r\n  title: \"\",\r\n  subtitle: \"\",\r\n  description: \"\",\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Container,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nimport text from \"./text.json\";\r\n\r\nimport Polymtl from \"../../assets/img/partners/polymtl.png\";\r\nimport AEP from \"../../assets/img/partners/aep.png\";\r\nimport Protocase from \"../../assets/img/partners/protocase.png\";\r\nimport NTX from \"../../assets/img/partners/ntx.png\";\r\nimport Diptrace from \"../../assets/img/partners/diptrace.png\";\r\n\r\nconst Partner = ({ img, alt, width }) => {\r\n  return (\r\n    <img\r\n      alt={alt}\r\n      className=\"img-center img-fluid\"\r\n      src={img}\r\n      style={{ width: `${width}px` }}\r\n    />\r\n  );\r\n};\r\n\r\nPartner.propTypes = {\r\n  img: PropTypes.string.isRequired,\r\n  alt: PropTypes.string,\r\n  width: PropTypes.number,\r\n};\r\n\r\nPartner.defaultProps = {\r\n  alt: \"...\",\r\n  width: 100,\r\n};\r\n\r\n\r\nconst Partners = () => {\r\n  return (\r\n    <Container>\r\n      <h3 className=\"mt-md mb-5\">\r\n        {text[\"sponsor_thank-you\"]}\r\n      </h3>\r\n      <Row className=\"align-items-center mb-5\">\r\n        <Partner alt=\"Polytechnique Montréal\" img={Polymtl} width={125} />\r\n        <Partner alt=\"Association Étudiante de Polytechnique\" img={AEP} width={125} />\r\n        <Partner alt=\"NeurotechX\" img={NTX} width={125} />\r\n        <Partner alt=\"Protocase\" img={Protocase} width={125} />\r\n        <Partner alt=\"Diptrace\" img={Diptrace} width={125} />\r\n      </Row>\r\n    </Container>);\r\n};\r\n\r\nexport default Partners;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Button,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  UncontrolledTooltip\r\n} from \"reactstrap\";\r\n\r\nimport Partners from \"./partners\";\r\nimport text from \"./text.json\";\r\n\r\nconst PlatformButton = ({ href, color, iconClass, tooltipText, tooltipID }) => {\r\n  return (\r\n    <>\r\n      <Button\r\n        className=\"btn-icon-only rounded-circle ml-1\"\r\n        color={color}\r\n        href={href}\r\n        id={tooltipID}\r\n        target=\"_blank\"\r\n      >\r\n        <span className=\"btn-inner--icon\">\r\n          <i className={`fa ${iconClass}`} />\r\n        </span>\r\n      </Button>\r\n      <UncontrolledTooltip delay={0} target={tooltipID}>\r\n        {tooltipText}\r\n      </UncontrolledTooltip>\r\n    </>\r\n  );\r\n};\r\n\r\nPlatformButton.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  color: PropTypes.string,\r\n  iconClass: PropTypes.string,\r\n  tooltipText: PropTypes.string,\r\n  tooltipID: PropTypes.string.isRequired\r\n};\r\n\r\nPlatformButton.defaultProps = {\r\n  color: \"secondary\",\r\n  iconClass: \"\",\r\n  tooltipText: \"\"\r\n};\r\n\r\nconst Copyright = () => {\r\n  return (\r\n    <div className=\"copyright\">\r\n      © {new Date().getFullYear()}{\" \"}\r\n      <a\r\n        href=\"http://polycortex.polymtl.ca/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {text[\"footer_copyright_polycortex\"]}\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Navfooter = () => {\r\n  return (\r\n    <Nav className=\" nav-footer justify-content-end\">\r\n      <NavItem>\r\n        <NavLink href=\"http://polycortex.polymtl.ca/\" target=\"_blank\">\r\n          {text[\"footer_about-us\"]}\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink href=\"https://github.com/PolyCortex\" target=\"_blank\">\r\n          {text[\"footer_license\"]}\r\n        </NavLink>\r\n      </NavItem>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <Partners />\r\n        <Container>\r\n          <hr />\r\n          <h3 className=\"text-primary font-weight-light mb-2\">\r\n            {text[\"support_title\"]}\r\n          </h3>\r\n          <Row className=\"row-grid align-items-center mb-5\">\r\n            <Col className=\"mt-sm\" lg=\"8\">\r\n              <h4 className=\" mb-3 font-weight-light\">\r\n                {text[\"support_platforms\"]}\r\n              </h4>\r\n              <PlatformButton\r\n                href=\"https://www.facebook.com/polycortex\"\r\n                color=\"facebook\"\r\n                iconClass=\"fa-facebook\"\r\n                tooltipText={text[\"support_facebook_tooltip\"]}\r\n                tooltipID=\"tooltip_facebook\"\r\n              />\r\n              <PlatformButton\r\n                href=\"https://www.instagram.com/polycortex/\"\r\n                color=\"instagram\"\r\n                iconClass=\"fa-instagram\"\r\n                tooltipText={text[\"support_instagram_tooltip\"]}\r\n                tooltipID=\"tooltip_instagram\"\r\n              />\r\n              <PlatformButton\r\n                href=\"https://github.com/PolyCortex\"\r\n                color=\"github\"\r\n                iconClass=\"fa-github\"\r\n                tooltipText={text[\"support_github_tooltip\"]}\r\n                tooltipID=\"tooltip_github\"\r\n              />\r\n            </Col>\r\n\r\n            <Col className=\"text-lg-right\" lg=\"4\">\r\n              <h4 className=\"mb-3 font-weight-light\">\r\n                {text[\"support_donate_text\"]}\r\n              </h4>\r\n              <Button\r\n                color=\"success\"\r\n                href=\"https://soutien.polymtl.ca/vie-etudiante\"\r\n                target=\"_blank\"\r\n              >\r\n                {text[\"support_donate_button\"]}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n          <Row className=\" align-items-center justify-content-md-between\">\r\n            <Col md=\"6\">\r\n              <Copyright />\r\n            </Col>\r\n            <Col md=\"6\">\r\n              <Navfooter />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass D3Component extends React.Component {\r\n  static propTypes = {\r\n    callback: PropTypes.func.isRequired,\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { callback } = this.props;\r\n    callback(this.svg);\r\n  }\r\n\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (<svg ref={ref => this.svg = ref } />);\r\n  }\r\n}\r\n\r\nexport default D3Component;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Emoji = ({symbol, label}) => (\r\n  <span\r\n    role=\"img\"\r\n    aria-label={label}\r\n    aria-hidden={label ? \"false\" : \"true\"}\r\n  >\r\n    {symbol}\r\n  </span>\r\n);\r\n\r\nEmoji.propTypes = {\r\n  symbol: PropTypes.string.isRequired,\r\n  label: PropTypes.string,\r\n};\r\n\r\nEmoji.defaultProps = {\r\n  label: \"\",\r\n};\r\n\r\nexport default Emoji;","import React from \"react\";\r\nimport { Alert } from \"reactstrap\";\r\nimport Emoji from \"./emoji\";\r\n\r\nconst WIPWarning = () => {\r\n  return (\r\n    <Alert color=\"warning\">\r\n      <span>\r\n        <Emoji symbol=\"🚧\" />\r\n        <strong> This is a work in progress. </strong>\r\n        The following data is mocked.{\" \"}\r\n        <Emoji symbol=\"🚧\" />\r\n      </span>\r\n    </Alert >\r\n  );\r\n}\r\n\r\nexport default WIPWarning;","import * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nimport hypnogramDataSleepEDF from \"assets/data/hypnogram.csv\";\r\nimport hypnogramDataPredicted from \"assets/data/hypnogram-predicted.csv\";\r\nimport hypnogramDataElectrophysiologist from \"assets/data/hypnogram-electrophysiologist.csv\";\r\n\r\nimport hypnogramDataOpenBCIElectrophysiologist from \"assets/data/hypnogram-openbci-electrophysiologist.csv\";\r\nimport hypnogramDataPredictedOpenBCI from \"assets/data/hypnogram-openbci-predicted.csv\";\r\n\r\n\r\nimport {\r\n  parseTimestampToDate,\r\n  convertValuesToLabels,\r\n  convertSources,\r\n  domainX,\r\n  domainY,\r\n  domainColor,\r\n} from \"./preproc\";\r\n\r\nimport {\r\n  createLine,\r\n  createHypnogramChart,\r\n  createAxes,\r\n  createTitle,\r\n  createLegend,\r\n} from \"./line-charts\";\r\n\r\nimport {\r\n  createMouseOver,\r\n} from \"./mouse-over\";\r\n\r\nconst initializeScales = ({ width, height }) => {\r\n  const x = d3.scaleTime().range([0, width]);\r\n  const y = d3.scaleOrdinal().range([...Array(6).keys()].map(x => (x / 5) * height));\r\n\r\n  return { x, y };\r\n};\r\n\r\nconst initializeAxes = (x, y) => {\r\n  const xAxis = d3\r\n    .axisBottom(x)\r\n    .tickFormat(d3.timeFormat(\"%H:%M\"));\r\n  const yAxis = d3\r\n    .axisLeft()\r\n    .scale(y);\r\n\r\n  return { xAxis, yAxis };\r\n};\r\n\r\nconst createDrawingGroup = (svg, dimensions, margin) => {\r\n  const { width, height } = dimensions;\r\n  const { left, top, right, bottom } = margin;\r\n  svg.attr(\"width\", width + left + right)\r\n    .attr(\"height\", height + top + bottom);\r\n\r\n  const g = svg.append(\"g\")\r\n    .attr(\"transform\", `translate(${left}, ${top})`);\r\n\r\n  return g;\r\n}\r\n\r\nconst createHypnogram = (containerNode, data, chartTitle, hypnogramNames, comparativeColors) => {\r\n  const svg = d3.select(containerNode);\r\n  const sleepLabels = ['W', 'REM', 'N1', 'N2', 'N3'];\r\n\r\n  const margin = {\r\n    top: 100,\r\n    right: 10,\r\n    bottom: 70,\r\n    left: 70\r\n  };\r\n  const dimensions = {\r\n    width: 1000 - margin.left - margin.right,\r\n    height: 400 - margin.top - margin.bottom\r\n  };\r\n\r\n  const { x, y } = initializeScales(dimensions);\r\n  const { xAxis, yAxis } = initializeAxes(x, y);\r\n  const g = createDrawingGroup(svg, dimensions, margin);\r\n  const line = createLine(x, y);\r\n\r\n  Promise.all(data.map(hypnoData => d3.csv(hypnoData))).then((data) => {\r\n    parseTimestampToDate(data);\r\n    convertValuesToLabels(data);\r\n    data = convertSources(data, hypnogramNames);\r\n\r\n    domainX(x, data);\r\n    domainY(y, sleepLabels);\r\n    const colorDomain = domainColor(data, comparativeColors);\r\n\r\n    const g_chart = createHypnogramChart(g, data, line, colorDomain);\r\n    createMouseOver(g_chart, x, y, data, margin, dimensions, colorDomain);\r\n    createAxes(g, xAxis, yAxis, dimensions, margin);\r\n    createTitle(g, chartTitle, dimensions, margin);\r\n    createLegend(g, hypnogramNames, comparativeColors, dimensions, margin);\r\n  });\r\n}\r\n\r\nexport const createSingleHypnogram = (containerNode) => {\r\n  const data = [hypnogramDataSleepEDF];\r\n  const chartTitle = \"Hypnogram\";\r\n  const hypnogramNames = [\"Classifier\"];\r\n  const comparativeColors = [\"#006aff\"];\r\n\r\n   // const labelColors = {\r\n  //   'W': \"#E3624B\",\r\n  //   'REM': \"#FFD443\",\r\n  //   'N1': \"#B0C9D9\",\r\n  //   'N2': \"#4da6fe\",\r\n  //   'N3': \"#48587f\",\r\n  // };\r\n\r\n  createHypnogram(containerNode, data, chartTitle, hypnogramNames, comparativeColors);\r\n};\r\n\r\n\r\nexport const createComparativeHypnogram = (containerNode, hypnogramNames) => {\r\n  let data = [];\r\n  if (_.isEqual(hypnogramNames, [\"Classifier\", \"Sleep-EDF\"])) {\r\n    data = [hypnogramDataPredicted, hypnogramDataSleepEDF];\r\n  } else if (_.isEqual(hypnogramNames, [\"Classifier\", \"Electrophysiologist\"])) {\r\n    data = [hypnogramDataPredictedOpenBCI, hypnogramDataOpenBCIElectrophysiologist];\r\n  } else if (_.isEqual(hypnogramNames, [\"Electrophysiologist\", \"Sleep-EDF\"])) {\r\n    data = [hypnogramDataElectrophysiologist, hypnogramDataSleepEDF];\r\n  }\r\n  \r\n  const chartTitle = `Agreement between ${hypnogramNames[0]} and ${hypnogramNames[1]}`;\r\n  const colors = {\r\n    \"Classifier\": \"#efce31\",\r\n    \"Sleep-EDF\": \"#006aff\",\r\n    \"Electrophysiologist\": \"#ff7575\"\r\n  };\r\n  const comparativeColors = hypnogramNames.map(x => colors[x]);\r\n  \r\n  createHypnogram(containerNode, data, chartTitle, hypnogramNames, comparativeColors);\r\n};","import * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nexport const createLine = (x, y) => {\r\n  return d3.line()\r\n    .x(d => x(d.timestamp))\r\n    .y(d => y(d.sleep_stage))\r\n    .curve(d3.curveStepAfter);\r\n};\r\n\r\nexport const createHypnogramChart = (g, data, line, color) => {\r\n  const g_chart = g.append(\"g\")\r\n    .attr(\"class\", \"hypnogram-lines\");\r\n\r\n  g_chart.selectAll()\r\n    .data(data)\r\n    .enter().append(\"path\")\r\n    .attr(\"class\", \"line\")\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"d\", x => line(x.values))\r\n    .attr(\"stroke\", x => color(x.name))\r\n    .attr(\"stroke-width\", 2);\r\n\r\n  return g_chart;\r\n};\r\n\r\nexport const createAxes = (g, xAxis, yAxis, dimensions, margin) => {\r\n  const { height, width } = dimensions;\r\n\r\n  g.append(\"g\")\r\n    .attr(\"class\", \"x axis\")\r\n    .attr(\"transform\", `translate(0,${height})`)\r\n    .call(xAxis);\r\n\r\n  g.append(\"g\")\r\n    .attr(\"class\", \"y axis\")\r\n    .call(yAxis);\r\n\r\n  g.append(\"text\").text(\"Time\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"x\", width)\r\n    .attr(\"y\", height + (1/2)*margin.bottom);\r\n\r\n  g.append(\"text\").text(\"Sleep stage\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .attr(\"x\", -height/2)\r\n    .attr(\"y\", -(1/2)*margin.left);\r\n};\r\n\r\nexport const createTitle = (g, title, dimensions, margin) => {\r\n  g.append(\"text\").text(title)\r\n    .attr(\"class\", \"chart-title\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"y\", -(3/4)*margin.top)\r\n    .attr(\"x\", (1/2)*dimensions.width);\r\n};\r\n\r\nexport const createLegend = (g, hypnogramNames, comparativeColors, dimensions, margin) => {\r\n  const legendData = _.zip(hypnogramNames, comparativeColors).map(x => {\r\n    return {\r\n      \"name\": x[0],\r\n      \"color\": x[1],\r\n    };\r\n  });\r\n\r\n  g.selectAll(\".rect.legend\")\r\n    .data(legendData)\r\n  .enter().append(\"rect\")\r\n    .attr(\"class\", \"legend\")\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"fill\", x => x.color)\r\n    .attr(\"width\", \"1em\")\r\n    .attr(\"height\", \"1em\")\r\n    .attr(\"y\", -(1/2)*margin.top)\r\n    .attr(\"x\", (_, i) => `${i * 8}em`);\r\n\r\n  g.selectAll(\".text.legend\")\r\n    .data(legendData)\r\n  .enter().append(\"text\")\r\n    .attr(\"class\", \"legend\")\r\n    .text(x => x.name)\r\n    .attr(\"font-size\", 12)\r\n    .attr(\"dominant-baseline\", \"hanging\")\r\n    .attr(\"y\", -(1/2)*margin.top)\r\n    .attr(\"dy\", 0.25+\"em\")\r\n    .attr(\"x\", (_, i) => `${1.5 + i * 11}em`);\r\n};","import * as d3 from \"d3\";\r\nimport _ from \"lodash\";\r\n\r\nexport const parseTimestampToDate = (data) => {\r\n  data.forEach(hypno => {\r\n    hypno.forEach(row => {\r\n      // To convert UNIX timestamp to JS Date, we have to convert nb of seconds to milliseconds.\r\n      const date = new Date(row.timestamp * 1000);\r\n      row.timestamp = new Date(\r\n        date.getUTCFullYear(),\r\n        date.getUTCMonth(),\r\n        date.getUTCDay(),\r\n        date.getUTCHours(),\r\n        date.getUTCMinutes(),\r\n        date.getUTCSeconds());\r\n    });\r\n  });\r\n};\r\n\r\nexport const convertValuesToLabels = (data) => {\r\n  const raw_data_labels_value = {\r\n    'W': 0,\r\n    'N1': 1,\r\n    'N2': 2,\r\n    'N3': 3,\r\n    'REM': 4,\r\n  }\r\n\r\n  data.forEach(hypno => {\r\n    hypno.forEach(row => {\r\n      row.sleep_stage = Object\r\n        .keys(raw_data_labels_value)\r\n        .find(key => raw_data_labels_value[key] === parseInt(row.sleep_stage));\r\n    }); \r\n  });\r\n};\r\n\r\nexport const convertSources = (data, hypnogramNames) => {\r\n  data = _.zip(data, hypnogramNames)\r\n    .map(x => { return {\r\n      \"name\": x[1],\r\n      \"values\": x[0]\r\n    }});\r\n\r\n  return data;\r\n};\r\n\r\nexport const domainX = (x, data) => {\r\n  // TODO: Préciser les domaines pour les variables \"xFocus\" et \"xContext\" pour l'axe X.\r\n  const dates = data[0].values.map(datum => datum.timestamp);\r\n  x.domain([d3.min(dates), d3.max(dates)]);\r\n};\r\n\r\nexport const domainY = (y, sleepLabels) => {\r\n  y.domain(sleepLabels);\r\n};\r\n\r\nexport const domainColor = (data, comparativeColors) => {\r\n  const numberHypnogram = data.length;\r\n  const colors = comparativeColors.slice(0, numberHypnogram);\r\n  return d3\r\n    .scaleOrdinal()\r\n    .domain(data.map(x => x.name))\r\n    .range(colors);\r\n};\r\n","import * as d3 from \"d3\";\r\n\r\nconst getHoveredData = (data, x, mouse, bisectTime) => {\r\n\r\n  const timestamps = data[0].values.map(x => x.timestamp);\r\n  const currentTimeDate = x.invert(mouse[0]);\r\n  const idx = bisectTime(timestamps, currentTimeDate, 1);\r\n  const epochIdx = currentTimeDate - timestamps[idx - 1] > timestamps[idx] - currentTimeDate\r\n    ? idx : idx - 1;\r\n\r\n  return data.map(x => {\r\n    x.currentValue = x.values[epochIdx];\r\n    return x;\r\n  });\r\n};\r\n\r\nexport const createMouseOver = (g, x, y, data, margin, dimensions, color) => {\r\n  const { width, height } = dimensions;\r\n  const bisectTime = d3.bisector(d => d).left; // https://github.com/d3/d3-array#bisector_left\r\n\r\n  // Act as a child of `g` to make sure mouse events are received from the whole chart (not only the lines)\r\n  g.append(\"rect\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n    .attr(\"opacity\", 0);\r\n\r\n  const lineHover = g.append(\"line\")\r\n    .attr(\"class\", \"lineHover\")\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke-width\", 1)\r\n    .style(\"stroke\", \"#999\")\r\n    .style(\"shape-rendering\", \"crispEdges\")\r\n    .style(\"opacity\", 0);\r\n\r\n  const dateHover = g.append(\"text\")\r\n    .attr(\"class\", \"lineHoverDate\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"font-size\", 15)\r\n    .attr(\"font-weight\", \"bold\")\r\n    .style(\"opacity\", 0);\r\n\r\n  const circleHover = g.selectAll(\".hoverCircle\")\r\n      .data(data)\r\n    .enter().append(\"circle\")\r\n    .attr(\"class\", \"hoverCircle\")\r\n    .style(\"fill\", \"none\")\r\n    .attr(\"stroke\", x => color(x.name))\r\n    .attr(\"r\", 5)\r\n    .attr(\"stroke-width\", \"1px\")\r\n    .style(\"opacity\", 0);\r\n\r\n  const textHover = g.selectAll(\".textHover\")\r\n      .data(data)\r\n    .enter().append(\"text\")\r\n    .attr(\"class\", \"textHover\")\r\n    .style(\"fill\", \"black\")\r\n    .attr(\"text-anchor\", \"start\")\r\n    .attr(\"font-size\", 12)\r\n    .style(\"opacity\", 0)\r\n    .attr(\"stroke\", x => color(x.name))\r\n    .attr(\"dy\", (_, i) => 1 + i * 1.25 + \"em\");\r\n\r\n  const mouseMove = function () {\r\n    const mouse = d3.mouse(this);\r\n\r\n    const hoveredData = getHoveredData(data, x, mouse, bisectTime);\r\n    const timestamp = hoveredData[0].currentValue.timestamp;\r\n\r\n    lineHover.attr(\"x1\", mouse[0])\r\n      .attr(\"x2\", mouse[0])\r\n      .style(\"opacity\", 1);\r\n\r\n    dateHover.text(d3.timeFormat(\"%H:%M:%S\")(timestamp))\r\n      .attr(\"transform\", `translate(${x(timestamp)},${height + margin.bottom - 10})`)\r\n      .style(\"opacity\", 1);\r\n    \r\n    circleHover.attr(\"cy\", x => y(x.currentValue.sleep_stage))\r\n      .attr('cx', x(timestamp))\r\n      .style(\"opacity\", 1);\r\n      \r\n    textHover.attr(\"transform\", `translate(${x(timestamp)},${(5/6)*height})`)\r\n      .text(x => `${x.name}: ${x.currentValue.sleep_stage}`)\r\n      .style(\"opacity\", 1);\r\n    \r\n    x(timestamp) > ((4/5)*width)\r\n      ? textHover.attr(\"text-anchor\", \"end\")\r\n        .attr(\"dx\", -10)\r\n      : textHover.attr(\"text-anchor\", \"start\")\r\n        .attr(\"dx\", 10);\r\n  };\r\n\r\n  const mouseLeave = () => {\r\n    lineHover.style(\"opacity\", 0);\r\n    dateHover.style(\"opacity\", 0);\r\n    circleHover.style(\"opacity\", 0);\r\n    textHover.style(\"opacity\", 0);\r\n  }\r\n\r\n  g.on('mousemove', mouseMove)\r\n    .on('mouseleave', mouseLeave);\r\n};","import * as d3 from \"d3\";\r\nimport {\r\n  TIMESTAMP_DURATION,\r\n  DATUM_PER_TIMESTAMP,\r\n  FREQUENCY_BINS,\r\n} from \"./initSpectrogram\";\r\n\r\n/**\r\n * Fichier permettant de traiter les données provenant du fichier JSON.\r\n */\r\n\r\n/**\r\n * Précise le domaine en associant un stage de sommeil à une couleur précise.\r\n *\r\n * @param color   Échelle de 10 couleurs.\r\n * @param sources Données formaté\r\n *\r\n */\r\nexport const domainColor = (color, sources) => {\r\n  var extent = d3.extent(sources, (d) => d.Intensity);\r\n  color.domain(extent);\r\n};\r\n\r\n/**\r\n * Précise le domaine des échelles utilisées par le graphique pour l'axe X.\r\n *\r\n * @param x      Échelle en X utilisée avec le graphique.\r\n * @param node      The name of the node to get the data from\r\n * @param data        Données provenant du fichier JSON.\r\n */\r\nexport const domainX = (x, data, node) => {\r\n  x.domain([0, getHoursFromIndex(data[node].length / DATUM_PER_TIMESTAMP)]);\r\n};\r\n\r\n/**\r\n * Précise le domaine des échelles utilisées par le graphique pour l'axe Y.\r\n *\r\n * @param y           Échelle en Y utilisée avec le graphique.\r\n * @param yAxisScale           Échelle en Y utilisée pour l'axe.\r\n * @param data        Données provenant du fichier JSON.\r\n */\r\nexport const domainY = (y, yAxisScale, frequencies) => {\r\n  y.domain(frequencies);\r\n  yAxisScale.domain([frequencies[0], frequencies[frequencies.length - 1]]);\r\n};\r\n\r\n/**\r\n * Trie les données par nom de rue puis par date.\r\n *\r\n * @param data      Données provenant du fichier JSON.\r\n * @param node      The name of the node to get the data from\r\n *\r\n * @return Array    Les données triées qui seront utilisées pour générer les graphiques.\r\n *                  L'élément retourné doit être un tableau d'objets comptant 10 entrées, une pour chaque rue\r\n *                  et une pour la moyenne. L'objet retourné doit être de la forme suivante:\r\n *\r\n *                  [\r\n *                    {\r\n *                      Frequency: float      // La fréquence du datum\r\n *                      Intensity: int        // L'intensity de cette fréquence\r\n *                      Timestamp: int        // Le temps du datum (sec)\r\n *                    },\r\n *                     ...\r\n *                  ]\r\n */\r\nexport const createSources = (data, node, frequencies) => {\r\n  var sources = [];\r\n  var nodeData = data[node];\r\n  for (let idx = 0; idx < nodeData.length; idx += DATUM_PER_TIMESTAMP) {\r\n    for (let jdx = 0; jdx < data.Frequencies.length; jdx += FREQUENCY_BINS) {\r\n      // var frequency = data.Frequencies[jdx];\r\n      var intensity = 0;\r\n      var currFrequencyBin = 0;\r\n      var currTimestampBin = 0;\r\n      for (\r\n        let kdx = idx;\r\n        kdx < idx + DATUM_PER_TIMESTAMP && kdx < nodeData.length;\r\n        kdx++\r\n      ) {\r\n        currTimestampBin++;\r\n        currFrequencyBin = 0;\r\n        for (\r\n          let ldx = jdx;\r\n          ldx < jdx + FREQUENCY_BINS && ldx < data.Frequencies.length;\r\n          ldx++\r\n        ) {\r\n          currFrequencyBin++;\r\n          intensity += nodeData[kdx][ldx];\r\n        }\r\n      }\r\n      var timeStamp = getHoursFromIndex(Math.ceil(idx / DATUM_PER_TIMESTAMP));\r\n\r\n      sources.push({\r\n        Frequency: frequencies[Math.ceil(jdx / FREQUENCY_BINS)],\r\n        Intensity: intensity / currTimestampBin / currFrequencyBin,\r\n        Timestamp: timeStamp,\r\n      });\r\n    }\r\n  }\r\n\r\n  return sources;\r\n};\r\n\r\nexport const getHoursFromIndex = (idx) => {\r\n  return (idx * TIMESTAMP_DURATION) / 60.0 / 60;\r\n};\r\n","\r\nexport const getDurationString = (duration) => {\r\n    var hours = Math.floor(duration)\r\n    var minutes = (duration % 1.0) * 60.0\r\n    var seconds = (minutes % 1.0) * 60.0\r\n    minutes = Math.floor(minutes)\r\n    seconds = Math.floor(seconds)\r\n    \r\n    return `${addZero(hours)}h ${addZero(minutes)}min ${addZero(seconds)}secs`\r\n}\r\n\r\nexport const getDurationStringHM = (duration) =>{  \r\n  duration = Number(duration);\r\n  var h = Math.floor(duration / 3600);\r\n  var m = Math.floor(duration % 3600 / 60);\r\n\r\n  return `${h}h${addZero(m)}`\r\n}\r\n\r\nexport const getDurationSecondString = (duration) => {\r\n  duration = Number(duration);\r\n  return getDurationString(duration/3600.0)\r\n}\r\n\r\n//Will add zero to display time in this format : 00:00:00 instead of 0:0:0\r\nexport const addZero = (i) => {\r\n  if (i < 10) i = \"0\" + i;\r\n  return i;\r\n}","import * as d3 from \"d3\";\r\nimport{\r\n  getDurationString\r\n} from \"../common/duration\"\r\nimport { getHoursFromIndex } from \"./preproc\";\r\n\r\n/**\r\n * Fichier permettant de dessiner les graphiques \"focus\" et \"contexte\".\r\n */\r\n\r\n/**\r\n * Crée le graphique focus.\r\n *\r\n * @param g         Le groupe SVG dans lequel le graphique doit être dessiné.\r\n * @param sources   Les données à utiliser.\r\n * @param x         L'échelle de l'axe des x\r\n * @param y         L'échelle de l'axe des y\r\n * @param color     L'échelle de couleurs ayant une couleur associée à un nom de rue.\r\n */\r\nexport const createSpectrgramChart = (g, sources, x, y, color, tip, height, width, margin) => {\r\n  //Creating all the parts of the stacked bar chart\r\n  g.selectAll(\".rect\")\r\n    .data(sources)\r\n    .enter()\r\n    .append(\"rect\")\r\n      .attr(\"x\", d => x(d.Timestamp))\r\n      .attr(\"y\", d => y(d.Frequency))\r\n      .attr(\"width\", () => x(getHoursFromIndex(1)))\r\n      .attr(\"height\", y.bandwidth())\r\n      .attr(\"fill\", d => color(d.Intensity))\r\n      .on(\"mouseover\", function(d){\r\n        tip.show(d, this);\r\n        d3.select(this).style(\"opacity\", 0.8);\r\n      })\r\n      .on(\"mouseout\",function() {\r\n        tip.hide();\r\n        d3.select(this).style(\"opacity\", 1);\r\n      })\r\n\r\n  // Titre axe des X\r\n  g.append(\"text\")\r\n      .attr(\"class\", \"x axis\")\r\n      .attr(\"y\", height + margin.bottom)\r\n      .attr(\"x\", width/2)\r\n      .attr(\"fill\", \"currentColor\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Time\"); \r\n  \r\n  // titre axe des Y\r\n  g.append(\"text\")\r\n      .attr(\"class\", \"y axis\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", 0 - margin.left)\r\n      .attr(\"x\",0 - (height / 2))\r\n      .attr(\"dy\", \"1em\")\r\n      .attr(\"fill\", \"currentColor\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\"Frequence (Hz)\"); \r\n  }\r\n\r\n/**\r\n * Obtient le texte associé à l'infobulle.\r\n *\r\n * @param d               Les données associées à la barre survollée par la souris.\r\n * @param currentData     Les données qui sont actuellement utilisées.\r\n * @param formatPercent   Fonction permettant de formater correctement un pourcentage.\r\n * @return {string}       Le texte à afficher dans l'infobulle.\r\n */\r\n\r\nexport const getToolTipText = (d) => {\r\n  //TODO : Fix name\r\n  return `Puissance : <strong> ${d.Intensity.toFixed(2)} </strong> dB<br>\\\r\n          Fréquence: <strong> ${d.Frequency.toFixed(2)} </strong> Hz <br>\\\r\n          Moment: <strong> ${getDurationString(d.Timestamp)} </strong>`;\r\n};\r\n\r\n","import * as d3 from \"d3\";\r\nimport tip from \"d3-tip\";\r\nimport data from \"assets/data/spectrograms\";\r\n\r\nimport { domainColor, domainX, domainY, createSources } from \"./preproc\";\r\n\r\nimport { legend } from \"./legend\";\r\n\r\nimport { createSpectrgramChart, getToolTipText } from \"./stages-charts\";\r\n\r\nconst SECONDS_PER_DATUM = 30;\r\nexport const DATUM_PER_TIMESTAMP = 4;\r\nexport const TIMESTAMP_DURATION = SECONDS_PER_DATUM * DATUM_PER_TIMESTAMP;\r\nexport const FREQUENCY_BINS = 5;\r\n\r\nexport const initSpectrogram = (g, node, width, height, margin) => {\r\n  /**** Interpolateur de couleurs ****/\r\n  var colorInterpolator = d3.interpolatePlasma;\r\n\r\n  /***** Échelles *****/\r\n  var x = d3.scaleLinear().range([0, width]);\r\n  var y = d3.scaleBand().range([height, 0]);\r\n  var yColor = d3.scaleLinear().range(y.range());\r\n  var yAxisScale = d3.scaleLinear().range(y.range());\r\n\r\n  /****** Axes *******/\r\n  var xAxis = d3.axisBottom(x).tickFormat((d) => `${d}h`);\r\n  var yAxis = d3.axisLeft(yAxisScale).ticks(5, \"s\");\r\n\r\n  // Groupe affichant le graphique principal ().\r\n  var spectrogram = g\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n  var gLegend = g\r\n    .append(\"g\")\r\n    .attr(\r\n      \"transform\",\r\n      \"translate(\" + (margin.left + width) + \",\" + margin.top + \")\"\r\n    );\r\n\r\n  /***** Chargement des données *****/\r\n  /***** Prétraitement des données *****/\r\n  var color = d3.scaleSequential().interpolator(colorInterpolator);\r\n\r\n  var tooltip = tip().attr(\"class\", \"d3-tip\").offset([-10, 0]);\r\n\r\n  var frequencies = [];\r\n  for (let idx = 0; idx < data.Frequencies.length; idx += FREQUENCY_BINS) {\r\n    var binTotal = 0;\r\n    let jdx = 0;\r\n    for (; jdx < FREQUENCY_BINS && idx + jdx < data.Frequencies.length; jdx++) {\r\n      binTotal += data.Frequencies[idx + jdx];\r\n    }\r\n    frequencies.push(binTotal / FREQUENCY_BINS);\r\n  }\r\n\r\n  var sources = createSources(data, node, frequencies);\r\n  domainColor(color, sources);\r\n  domainColor(yColor, sources);\r\n  domainX(x, data, node);\r\n  domainY(y, yAxisScale, frequencies);\r\n\r\n  // /***** Création du graphique Stacked bar chart *****/\r\n  createSpectrgramChart(\r\n    spectrogram,\r\n    sources,\r\n    x,\r\n    y,\r\n    color,\r\n    tooltip,\r\n    height,\r\n    width,\r\n    margin\r\n  );\r\n\r\n  // Axes\r\n  spectrogram\r\n    .append(\"g\")\r\n    .attr(\"class\", \"x axis\")\r\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    .call(xAxis)\r\n    .selectAll(\"text\")\r\n    .style(\"font-size\", \"18px\");\r\n\r\n  spectrogram\r\n    .append(\"g\")\r\n    .attr(\"class\", \"y axis\")\r\n    .call(yAxis)\r\n    .selectAll(\"text\")\r\n    .style(\"font-size\", \"18px\");\r\n\r\n  // /***** Création de l'infobulle *****/\r\n  tooltip.html(function (d) {\r\n    return getToolTipText.call(this, d);\r\n  });\r\n  g.call(tooltip);\r\n\r\n  // /***** Création de la légende *****/\r\n  legend(gLegend, color, yColor, height, margin.right);\r\n};\r\n","import * as d3 from \"d3\";\r\n\r\n/**\r\n * Fichier permettant de générer la légende et de gérer les interactions de celle-ci.\r\n */\r\n\r\n/**\r\n * Crée une légende à partir de la source.\r\n *\r\n * @param svg       L'élément SVG à utiliser pour créer la légende.\r\n * @param color     L'échelle de couleurs.\r\n */\r\nexport const legend = (svg, color, y, height, width) => {\r\n  var interpolate = d3.interpolate(color.domain()[0], color.domain()[1]);\r\n\r\n  var colors = [];\r\n  var totalPoints = 3;\r\n  for (let index = 0; index <= totalPoints; index++) {\r\n    var interpolateIndex = index / totalPoints;\r\n    var scaleIndex = interpolate(interpolateIndex);\r\n    colors.push(color(scaleIndex));\r\n  }\r\n\r\n  var svgDefs = svg.append(\"defs\");\r\n\r\n  var mainGradient = svgDefs\r\n    .append(\"linearGradient\")\r\n    .attr(\"id\", \"mainGradient\")\r\n    .attr(\"x1\", \"0%\")\r\n    .attr(\"x2\", \"0%\")\r\n    .attr(\"y1\", \"100%\")\r\n    .attr(\"y2\", \"0%\");\r\n\r\n  mainGradient\r\n    .selectAll(\"stop\")\r\n    .data(colors)\r\n    .enter()\r\n    .append(\"stop\")\r\n    .attr(\"stop-color\", (d) => d)\r\n    .attr(\"offset\", (d, i) => i / (colors.length - 1));\r\n\r\n  svg\r\n    .append(\"rect\")\r\n    .attr(\"fill\", \"url(#mainGradient)\")\r\n    .attr(\"x\", width / 4)\r\n    .attr(\"y\", 0)\r\n    .attr(\"width\", width / 4)\r\n    .attr(\"height\", height);\r\n\r\n  var yAxis = d3.axisRight(y).ticks(5, \"s\");\r\n  svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"y axis\")\r\n    .attr(\"transform\", \"translate(\" + width / 2 + \",0)\")\r\n    .call(yAxis)\r\n    .selectAll(\"text\")\r\n    .style(\"font-size\", \"18px\");\r\n\r\n  // Titre axe des Y\r\n  svg\r\n    .append(\"text\")\r\n    .attr(\"class\", \"y axis\")\r\n    .attr(\"transform\", \"rotate(90)\")\r\n    .attr(\"y\", 0 - width)\r\n    .attr(\"x\", height / 2)\r\n    .attr(\"dy\", \"1em\")\r\n    .attr(\"fill\", \"currentColor\")\r\n    .style(\"text-anchor\", \"middle\")\r\n    .text(\"Puissance\");\r\n};\r\n","/**\r\n * Fichier permettant de traiter les données provenant du fichier CSV.\r\n */\r\n\r\n/**\r\n * Précise le domaine en associant un stage de sommeil à une couleur précise.\r\n *\r\n * @param color   Échelle de 10 couleurs.\r\n * @param states  Les stage de sommeil\r\n */\r\nexport const domainColor = (color, states) => {\r\n  color\r\n    .domain(states)\r\n    .range([\"#E3624B\", \"#B0C9D9\", \"#4da6fe\", \"#48587f\", \"#FFD443\"]);\r\n};\r\n\r\n/**\r\n * Précise le domaine des échelles utilisées par les graphiques \"focus\" et \"contexte\" pour l'axe X.\r\n *\r\n * @param xFocus      Échelle en X utilisée avec le graphique \"focus\".\r\n * @param xContext    Échelle en X utilisée avec le graphique \"contexte\".\r\n * @param data        Données provenant du fichier CSV.\r\n */\r\nexport const domainX = (xFocus, data) => {\r\n  xFocus.domain([data[0].timestamp, data[data.length - 1].timestamp]);\r\n};\r\n\r\n/**\r\n * Précise le domaine des échelles utilisées par les graphiques \"focus\" et \"contexte\" pour l'axe Y.\r\n *\r\n * @param yFocus      Échelle en Y utilisée avec le graphique \"focus\".\r\n * @param yContext    Échelle en Y utilisée avec le graphique \"contexte\".\r\n * @param sources     Données triées par nom de rue et par date (voir fonction \"createSources\").\r\n */\r\nexport const domainY = (yFocus, states) => {\r\n  yFocus.domain(states);\r\n};\r\n\r\n/**\r\n * Convertit les dates se trouvant dans le fichier CSV en objet de type Date.\r\n *\r\n * @param data    Données provenant du fichier CSV.\r\n * @see https://www.w3schools.com/jsref/jsref_obj_date.asp\r\n */\r\nexport const convertSource = (data) => {\r\n  data.forEach((row) => {\r\n    const date = new Date(row.timestamp * 1000);\r\n    row.timestamp = new Date(\r\n      date.getUTCFullYear(),\r\n      date.getUTCMonth(),\r\n      date.getUTCDay(),\r\n      date.getUTCHours(),\r\n      date.getUTCMinutes(),\r\n      date.getUTCSeconds());\r\n  });\r\n};\r\n\r\n/**\r\n * Trie les données par nom de rue puis par date.\r\n *\r\n * @param color     Échelle de 10 couleurs (son domaine contient les noms de rues).\r\n * @param data      Données provenant du fichier CSV.\r\n *\r\n * @return Array    Les données triées qui seront utilisées pour générer les graphiques.\r\n *                  L'élément retourné doit être un tableau d'objets comptant 10 entrées, une pour chaque rue\r\n *                  et une pour la moyenne. L'objet retourné doit être de la forme suivante:\r\n *\r\n *                  [\r\n *                    {\r\n *                      name: string      // Le nom de la rue,\r\n *                      values: [         // Le tableau compte 365 entrées, pour les 365 jours de l'année.\r\n *                        date: Date,     // La date du jour.\r\n *                        count: number   // Le nombre de vélos compté ce jour là (effectuer une conversion avec parseInt)\r\n *                      ]\r\n *                    },\r\n *                     ...\r\n *                  ]\r\n */\r\nexport const createSources = (data, states, statesOrder) => {\r\n  var sources = [];\r\n  var totalTimestamps = data.length - 1;\r\n  var currentStageDebut = data[0].timestamp;\r\n  var currentStage = 0;\r\n  var stagePortion = 0; //portion in the night of the current stage\r\n\r\n  data.forEach((row, i) => {\r\n    stagePortion++;\r\n    //We sum the portions of the current stage\r\n    if (row.sleep_stage !== currentStage || i === data.length - 1) {\r\n      sources.push({\r\n        stageText: states[currentStage],\r\n        stage: statesOrder.indexOf(states[currentStage]),\r\n        stagePortion: (stagePortion / totalTimestamps) * 100,\r\n        currentStageDebut: currentStageDebut,\r\n        currentStageEnd: row.timestamp,\r\n      });\r\n      //next sleep stage\r\n      currentStageDebut = row.timestamp;\r\n      currentStage = row.sleep_stage;\r\n      stagePortion = 0;\r\n    }\r\n  });\r\n\r\n  return sources;\r\n};\r\n\r\n//Calculate the total portion of each sleep stage (for Viz 3)\r\nexport const calculateStagesPortion = (data, states, statesOrder) => {\r\n  var stageProportionCounts = [0, 0, 0, 0, 0];\r\n  var totalTimestamp = data.length;\r\n  //lets find how much % of the night does all stages have\r\n  data.forEach((row) => {\r\n    ++stageProportionCounts[statesOrder.indexOf(states[row.sleep_stage])];\r\n  });\r\n\r\n  stageProportionCounts.forEach((stagePortion, i) => {\r\n    stageProportionCounts[i] = stagePortion / totalTimestamp;\r\n  });\r\n\r\n  return stageProportionCounts;\r\n};\r\n\r\n//Finds the index of the first element of each sleep stage (for Viz 3)\r\nexport const findFirstStageIndex = (states) => {\r\n  var firstIndexes = [];\r\n\r\n  for (let stage = 0; stage < 5; stage++) {\r\n    firstIndexes.push(states.findIndex((element) => element.stage === stage));\r\n  }\r\n\r\n  return firstIndexes;\r\n};\r\n","/**\r\n * Fichier permettant de générer la légende et de gérer les interactions de celle-ci.\r\n */\r\n\r\n/**\r\n * Crée une légende à partir de la source.\r\n *\r\n * @param svg       L'élément SVG à utiliser pour créer la légende.\r\n * @param sources   Données triées par nom de rue et par date.\r\n * @param color     Échelle de 10 couleurs.\r\n */\r\nexport const barLegend = (svg, states, color) => {\r\n  var size = 20;\r\n\r\n  svg\r\n    .selectAll(\"dots\")\r\n    .data(states)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"legend\")\r\n    .attr(\"x\", function (d, i) {\r\n      if (i === 0) return 30;\r\n      else if (i === states.length - 1) return 50 + i * 60;\r\n      else return 30 + i * 60;\r\n    })\r\n    .attr(\"y\", 40)\r\n    .attr(\"width\", size)\r\n    .attr(\"height\", size)\r\n    .style(\"fill\", function (d, i) {\r\n      return color(i);\r\n    })\r\n    .attr(\"transform\", \"translate(\" + 100 + \",\" + 0 + \")\")\r\n    .on(\"click\", function (d) {\r\n      //displayLine(d3.select(this), color(d));\r\n    });\r\n\r\n  svg\r\n    .selectAll(\"names\")\r\n    .data(states)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"class\", \"legend\")\r\n    .attr(\"x\", function (d, i) {\r\n      return i * 60;\r\n    })\r\n    .attr(\"y\", 53)\r\n    .text(function (d) {\r\n      return d;\r\n    })\r\n    .style(\"fill\", function (d, i) {\r\n      return color(i);\r\n    })\r\n    .style(\"font-size\", \"20px\")\r\n    .attr(\"text-anchor\", \"left\")\r\n    .style(\"alignment-baseline\", \"middle\")\r\n    .attr(\"transform\", \"translate(\" + 100 + \",\" + 0 + \")\");\r\n};\r\n","import * as d3 from \"d3\";\r\nimport {\r\n  addZero,\r\n  getDurationString,\r\n  getDurationSecondString,\r\n  getDurationStringHM,\r\n} from \"../common/duration\";\r\nimport { TRANSITION_TIME_MS } from \"d3/common/constantes\";\r\n\r\n/**\r\n * Fichier permettant de dessiner les graphiques \"focus\" et \"contexte\".\r\n */\r\n\r\n/**\r\n * Crée le graphique focus.\r\n *\r\n * @param g         Le groupe SVG dans lequel le graphique doit être dessiné.\r\n * @param sources   Les données à utiliser.\r\n * @param line      La fonction permettant de dessiner les lignes du graphique.\r\n * @param color     L'échelle de couleurs ayant une couleur associée à un nom de rue.\r\n */\r\nexport const createStackedBarChart = (g, sources, x, color, tip, height) => {\r\n  //Creating all the parts of the stacked bar chart\r\n  g.selectAll(\".rect\")\r\n    .data(sources)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"rect-stacked\")\r\n    .attr(\"x\", (d) => x(d.currentStageDebut))\r\n    .attr(\"y\", 0)\r\n    .attr(\"width\", (d) => x(d.currentStageEnd) - x(d.currentStageDebut))\r\n    .attr(\"height\", height)\r\n    .attr(\"fill\", (d) => color(d.stageText))\r\n    .on(\"mouseover\", function (d) {\r\n      tip.show(d, this);\r\n      d3.select(this).style(\"opacity\", 0.8);\r\n    })\r\n    .on(\"mouseout\", function() {\r\n      tip.hide();\r\n      d3.select(this).style(\"opacity\", 1);\r\n    });\r\n};\r\n/**\r\n * Obtient le texte associé à l'infobulle.\r\n *\r\n * @param d               Les données associées à la barre survollée par la souris.\r\n * @param currentData     Les données qui sont actuellement utilisées.\r\n * @param formatPercent   Fonction permettant de formater correctement un pourcentage.\r\n * @return {string}       Le texte à afficher dans l'infobulle.\r\n */\r\n\r\nexport const getToolTipText = (d) => {\r\n  var h = addZero(d.currentStageDebut.getHours());\r\n  var m = addZero(d.currentStageDebut.getMinutes());\r\n  var hf = addZero(d.currentStageEnd.getHours());\r\n  var mf = addZero(d.currentStageEnd.getMinutes());\r\n\r\n  var hourDiff = d.currentStageEnd - d.currentStageDebut; //in ms\r\n  hourDiff /= 3.6e6; //in h\r\n\r\n  return `Stage : <strong> ${d.stageText} </strong> <br>\r\n          Début  :  <strong> ${h} h ${m}  </strong>\r\n            -  Fin : <strong> ${hf} h ${mf} </strong> <br>\r\n          Durée: <strong> ${getDurationString(hourDiff)} </strong>`; //TO DO ADD HOURS\r\n};\r\n\r\n/**\r\n * Obtient le texte associé à l'infobulle.\r\n *\r\n * @param d               Les données associées à la barre survollée par la souris.\r\n * @return {string}       Le texte à afficher dans l'infobulle.\r\n */\r\nexport const getStackedToolTipText = (\r\n  d,\r\n  totalStagesPortion,\r\n  totalTimeStamp\r\n) => {\r\n  return `Stage : <strong> ${d.stageText} </strong><br> \r\n          Durée : <strong> ${getDurationSecondString(\r\n            totalStagesPortion[d.stage] * totalTimeStamp * 30\r\n          )} </strong><br>`;\r\n};\r\n\r\nexport const createStagesDurationAxes = (data, xAxis, width) => {\r\n  var sleepDiff =\r\n    data[data.length - 1].currentStageEnd.getTime() -\r\n    data[0].currentStageDebut.getTime();\r\n  var sleepTotal = sleepDiff / (1000 * 60 * 60);\r\n\r\n  var newscale = d3.scaleLinear().domain([0, sleepTotal]).range([0, width]);\r\n\r\n  xAxis.scale(newscale).tickFormat((d) => d + \" h\");\r\n};\r\n\r\nexport const createSmallStackedBarChart = (\r\n  g,\r\n  pourcentageData,\r\n  data,\r\n  name,\r\n  totalTimeStamp,\r\n  xAxis,\r\n  width,\r\n  height,\r\n  color\r\n) => {\r\n  var stackedBar = g\r\n    .selectAll(\".stacked-bar\")\r\n    .data(pourcentageData)\r\n    .enter()\r\n    .append(\"g\");\r\n\r\n  stackedBar\r\n    .append(\"rect\")\r\n    .transition()\r\n    .duration(TRANSITION_TIME_MS)\r\n    .attr(\"class\", \"rect-stacked\")\r\n    .attr(\r\n      \"x\",\r\n      (d, i) =>\r\n        pourcentageData\r\n          .slice(0, i)\r\n          .map((a) => a.value)\r\n          .reduce((a, b) => a + b, 0) * width\r\n    )\r\n    .attr(\"width\", (d) => d.value * width)\r\n    .attr(\"height\", 80)\r\n    .attr(\"fill\", (d) => color(d.stage))\r\n    .on(\"end\", () => {\r\n      g.selectAll(\".pourcentage\").style(\"opacity\", 1);\r\n      g.selectAll(\".label-sleepType\").style(\"opacity\", 1);\r\n    });\r\n\r\n  var text = stackedBar.append(\"text\").attr(\"class\", \"pourcentage\");\r\n\r\n  //hours\r\n  text\r\n    .append(\"tspan\")\r\n    .text((d) => getDurationStringHM(d.value * totalTimeStamp * 30))\r\n    .attr(\r\n      \"x\",\r\n      (d, i) =>\r\n        pourcentageData\r\n          .slice(0, i)\r\n          .map((a) => a.value)\r\n          .reduce((a, b) => a + b, 0) *\r\n          width +\r\n        (pourcentageData[i].value / 2) * width\r\n    )\r\n    .attr(\"y\", height / 3)\r\n    .attr(\"font-size\", \"25px\")\r\n    .attr(\"font-weight\", 15);\r\n\r\n  //pourcentage\r\n  text\r\n    .append(\"tspan\")\r\n    .text((d) => d.value * 100 + \"%\")\r\n    .attr(\"x\", (d, i) => {\r\n      return (\r\n        pourcentageData\r\n          .slice(0, i)\r\n          .map((a) => a.value)\r\n          .reduce((a, b) => a + b, 0) *\r\n          width +\r\n        (pourcentageData[i].value / 2) * width\r\n      );\r\n    })\r\n    .attr(\"y\", (2 * height) / 3)\r\n    .attr(\"font-size\", \"20px\")\r\n    .attr(\"font-weight\", 10);\r\n\r\n  //create stackedbar axes\r\n  createStagesDurationAxes(data, xAxis, width);\r\n\r\n  g.append(\"g\")\r\n    .attr(\"class\", \"x axis\")\r\n    .attr(\"transform\", \"translate(0,\" + 80 + \")\")\r\n    .transition()\r\n    .duration(TRANSITION_TIME_MS)\r\n    .call(xAxis)\r\n    .selectAll(\"text\")\r\n    .style(\"font-size\", \"18px\");\r\n\r\n  //label\r\n  g.append(\"text\")\r\n    .attr(\"class\", \"label-sleepType\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", -15)\r\n    .text(name);\r\n};\r\n","export const TRANSITION_TIME_MS = 1000","import * as d3 from \"d3\";\r\nimport { getDurationStringHM } from \"../common/duration\";\r\nimport {\r\n  createSmallStackedBarChart,\r\n  createStagesDurationAxes,\r\n} from \"./stages-charts\";\r\nimport { TRANSITION_TIME_MS } from \"d3/common/constantes\";\r\n\r\nexport let firstCallback = () => {};\r\nexport let secondCallback = () => {};\r\nexport let thirdCallback = () => {};\r\nexport let fourthCallback = () => {};\r\nexport let fifthCallback = () => {};\r\n\r\nexport const addTransitions = (\r\n  g,\r\n  gSecondBarChart,\r\n  gThirdBarChart,\r\n  sources,\r\n  color,\r\n  height,\r\n  barHeight,\r\n  width,\r\n  tipStacked,\r\n  xAxis,\r\n  yAxis,\r\n  firstStageIndex,\r\n  totalStagePortion,\r\n  totalTimeStamp\r\n) => {\r\n  firstCallback = firstTransition(g, xAxis, yAxis, height, color);\r\n  secondCallback = secondTransition(\r\n    g,\r\n    sources,\r\n    firstStageIndex,\r\n    totalStagePortion,\r\n    width,\r\n    height,\r\n    xAxis,\r\n    tipStacked\r\n  );\r\n  thirdCallback = thirdTransition(\r\n    g,\r\n    sources,\r\n    firstStageIndex,\r\n    totalStagePortion,\r\n    width,\r\n    barHeight,\r\n    totalTimeStamp\r\n  );\r\n  fourthCallback = fourthTransition(\r\n    gSecondBarChart,\r\n    sources,\r\n    xAxis,\r\n    width,\r\n    barHeight,\r\n    totalTimeStamp,\r\n    color\r\n  );\r\n  fifthCallback = fifthTransition(\r\n    gThirdBarChart,\r\n    sources,\r\n    xAxis,\r\n    width,\r\n    barHeight,\r\n    totalTimeStamp,\r\n    color\r\n  );\r\n};\r\n\r\n/**\r\n * Réalise une transition entre les données actuellement utilisées et les nouvelles qui doivent être utilisées.\r\n *\r\n * @param g       Le groupe SVG dans lequel le graphique à bulles est dessiné.\r\n * @param data    Les nouvelles données à utiliser.\r\n * @param x       L'échelle pour l'axe X.\r\n * @param y       L'échelle pour l'axe Y.\r\n * @param r       L'échelle pour le rayon des cercles.\r\n */\r\nconst firstTransition = (g, xAxis, yAxis, height, color) => () => {\r\n  g.selectAll(\".y.axis\").remove();\r\n\r\n  //create Y axes\r\n  let axis = g.append(\"g\").attr(\"class\", \"y axis\");\r\n\r\n  axis.transition().duration(TRANSITION_TIME_MS).call(yAxis);\r\n\r\n  axis\r\n    .selectAll(\"text\")\r\n    .attr(\"class\", \"y-label\")\r\n    .attr(\"y\", height / 2)\r\n    .attr(\"x\", -10)\r\n    .style(\"fill\", (d) => color(d))\r\n    .style(\"font-size\", \"20px\")\r\n    .attr(\"text-anchor\", \"left\")\r\n    .style(\"alignment-baseline\", \"middle\");\r\n\r\n  //Move every sleep stage portion to the correspending stage row\r\n  g.selectAll(\".rect-stacked\")\r\n    .transition()\r\n    .duration(2000)\r\n    .attr(\"y\", (d) => height * d.stage)\r\n    .attr(\"height\", height);\r\n\r\n  //Move X axes\r\n  g.select(\".x.axis\")\r\n    .transition()\r\n    .attr(\"transform\", \"translate(0,\" + height * 5 + \")\")\r\n    .duration(2000)\r\n    .call(xAxis);\r\n};\r\n\r\n//second data vizualisation\r\nconst secondTransition = (\r\n  g,\r\n  data,\r\n  firstIndexes,\r\n  totalStagePortion,\r\n  width,\r\n  height,\r\n  xAxis,\r\n  tip\r\n) => () => {\r\n  createStagesDurationAxes(data, xAxis, width);\r\n\r\n  g.select(\".x.axis\").transition().duration(500).call(xAxis);\r\n\r\n  //Move all part to the left and make the first bar of each row become the cumulative portion of the stage\r\n  g.selectAll(\".rect-stacked\")\r\n    .on(\"mouseover\", function (d) {\r\n      tip.show(d, this);\r\n      d3.select(this).style(\"opacity\", 0.8);\r\n    })\r\n    .on(\"mouseout\", function () {\r\n      tip.hide();\r\n      d3.select(this).style(\"opacity\", 1);\r\n    })\r\n    .transition()\r\n    .attr(\"x\", 0)\r\n    .attr(\"width\", (d, i) =>\r\n      i === firstIndexes[d.stage] ? totalStagePortion[d.stage] * width : 0\r\n    )\r\n    .duration(TRANSITION_TIME_MS)\r\n    .on(\"end\", () => g.selectAll(\".pourcentage\").style(\"opacity\", 1));\r\n\r\n  //text containing the % of the sleep stage on the bar\r\n  g.selectAll(\".text\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"class\", \"pourcentage\")\r\n    .text((d, i) =>\r\n      i === firstIndexes[d.stage]\r\n        ? Math.round(totalStagePortion[d.stage] * 1000) / 10 + \"%\"\r\n        : \"\"\r\n    )\r\n    .attr(\"x\", width / 20)\r\n    .attr(\"y\", (d) => height * d.stage + height / 2)\r\n    .style(\"fill\", \"black\");\r\n};\r\n\r\nconst thirdTransition = (\r\n  g,\r\n  data,\r\n  firstIndexes,\r\n  totalStagePortion,\r\n  width,\r\n  height,\r\n  totalTimeStamp\r\n) => () => {\r\n  //Remove y axis and labels\r\n  g.selectAll(\".y.axis\").remove();\r\n  g.selectAll(\".pourcentage\").remove();\r\n\r\n  g.select(\".x.axis\")\r\n    .transition()\r\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    .duration(TRANSITION_TIME_MS);\r\n\r\n  //first barChart\r\n  var stackedBar = g.selectAll(\".rect-stacked\");\r\n\r\n  stackedBar\r\n    .transition()\r\n    .duration(TRANSITION_TIME_MS / 3)\r\n    .attr(\r\n      \"x\",\r\n      (d) =>\r\n        totalStagePortion.slice(0, d.stage).reduce((a, b) => a + b, 0) * width\r\n    )\r\n    .transition()\r\n    .duration(TRANSITION_TIME_MS / 3)\r\n    .attr(\"y\", (d, i) => {\r\n      if (i === firstIndexes[d.stage]) return 0;\r\n    })\r\n    .transition()\r\n    .duration(TRANSITION_TIME_MS / 3)\r\n    .attr(\"height\", height)\r\n    .on(\"end\", () => {\r\n      g.selectAll(\".pourcentage\").style(\"opacity\", 1);\r\n      g.selectAll(\".label-sleepType\").style(\"opacity\", 1);\r\n    });\r\n\r\n  var text = g\r\n    .selectAll(\".text\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"text\")\r\n    .attr(\"class\", \"pourcentage\");\r\n\r\n  //hours\r\n  text\r\n    .append(\"tspan\")\r\n    .text((d, i) =>\r\n      i === firstIndexes[d.stage]\r\n        ? getDurationStringHM(totalStagePortion[d.stage] * totalTimeStamp * 30)\r\n        : \"\"\r\n    )\r\n    .attr(\r\n      \"x\",\r\n      (d) =>\r\n        totalStagePortion.slice(0, d.stage).reduce((a, b) => a + b, 0) * width +\r\n        (totalStagePortion[d.stage] / 2) * width\r\n    )\r\n    .attr(\"y\", (d, i) => {\r\n      if (i === firstIndexes[d.stage]) return 40;\r\n    })\r\n    .attr(\"font-size\", \"25px\")\r\n    .attr(\"font-weight\", 15);\r\n\r\n  //percentage\r\n  text\r\n    .append(\"tspan\")\r\n    .text((d, i) =>\r\n      i === firstIndexes[d.stage]\r\n        ? Math.round(totalStagePortion[d.stage] * 1000) / 10 + \"%\"\r\n        : \"\"\r\n    )\r\n    .attr(\r\n      \"x\",\r\n      (d) =>\r\n        totalStagePortion.slice(0, d.stage).reduce((a, b) => a + b, 0) * width +\r\n        (totalStagePortion[d.stage] / 2) * width\r\n    )\r\n    .attr(\"y\", (d, i) => {\r\n      if (i === firstIndexes[d.stage]) return 60;\r\n    })\r\n    .attr(\"font-size\", \"20px\")\r\n    .attr(\"font-weight\", 10);\r\n\r\n  //label\r\n  g.append(\"text\")\r\n    .attr(\"class\", \"label-sleepType\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", -15)\r\n    .text(\"You\");\r\n};\r\nconst fourthTransition = (\r\n  gSecondBarChart,\r\n  data,\r\n  xAxis,\r\n  width,\r\n  height,\r\n  totalTimeStamp,\r\n  color\r\n) => () => {\r\n  //Restless barChart\r\n  const restlessSleepData = [\r\n    { stage: \"W\", value: 0.156 },\r\n    { stage: \"REM\", value: 0.19 },\r\n    { stage: \"N1\", value: 0.098 },\r\n    { stage: \"N2\", value: 0.506 },\r\n    { stage: \"N3\", value: 0.049 },\r\n  ];\r\n  createSmallStackedBarChart(\r\n    gSecondBarChart,\r\n    restlessSleepData,\r\n    data,\r\n    \"Restless Legs Syndrome\",\r\n    totalTimeStamp,\r\n    xAxis,\r\n    width,\r\n    height,\r\n    color\r\n  );\r\n};\r\n\r\nconst fifthTransition = (\r\n  gThirdBarChart,\r\n  data,\r\n  xAxis,\r\n  width,\r\n  height,\r\n  totalTimeStamp,\r\n  color\r\n) => () => {\r\n  //Sleep apnea barChart\r\n  const sleepApneaData = [\r\n    { stage: \"W\", value: 0.326 },\r\n    { stage: \"REM\", value: 0.057 },\r\n    { stage: \"N1\", value: 0.216 },\r\n    { stage: \"N2\", value: 0.329 },\r\n    { stage: \"N3\", value: 0.071 },\r\n  ];\r\n  createSmallStackedBarChart(\r\n    gThirdBarChart,\r\n    sleepApneaData,\r\n    data,\r\n    \"Sleep Apnea\",\r\n    totalTimeStamp,\r\n    xAxis,\r\n    width,\r\n    height,\r\n    color\r\n  );\r\n};\r\n","import * as d3 from \"d3\";\r\nimport tip from \"d3-tip\";\r\nimport barChartData from \"assets/data/hypnogram.csv\";\r\n\r\nimport {\r\n  domainColor,\r\n  domainX,\r\n  domainY,\r\n  convertSource,\r\n  createSources,\r\n  calculateStagesPortion,\r\n  findFirstStageIndex,\r\n} from \"./preproc\";\r\n\r\nimport { barLegend } from \"./legend\";\r\n\r\nimport {\r\n  createStackedBarChart,\r\n  getToolTipText,\r\n  getStackedToolTipText,\r\n} from \"./stages-charts\";\r\n\r\nimport { addTransitions } from \"./transition\";\r\n\r\nexport const initializeBarChart = (\r\n  g,\r\n  width,\r\n  height,\r\n  margin,\r\n  useTransitions = true\r\n) => {\r\n  let transitions;\r\n  /**** Prétraitement de donnée ****/\r\n  var states = [\"W\", \"N1\", \"N2\", \"N3\", \"REM\"];\r\n  var statesOrder = [\"W\", \"REM\", \"N1\", \"N2\", \"N3\"];\r\n\r\n  /**** Dimensions ****/\r\n  height = Math.round(height);\r\n  var translationHeight = Math.round(\r\n    useTransitions ? height / states.length : height\r\n  );\r\n  var barHeight = translationHeight;\r\n\r\n  /***** Échelles *****/\r\n  var x = d3.scaleTime().range([0, width]);\r\n  var y = d3\r\n    .scaleOrdinal()\r\n    .range([\r\n      0,\r\n      Math.round(height * 0.2),\r\n      Math.round(height * 0.4),\r\n      Math.round(height * 0.6),\r\n      Math.round(height * 0.8),\r\n      height,\r\n    ]);\r\n\r\n  /****** Axes *******/\r\n  var xAxis = d3.axisBottom(x).tickFormat((d) => `${d.getHours()}h`);\r\n  var yAxis = d3.axisLeft().scale(y).tickSize(-width); //will create the lines in second visualisation\r\n\r\n  // Groupe affichant le graphique principal ().\r\n  var gBarChart = g\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n  /***** Chargement des données *****/\r\n  d3.csv(barChartData).then(function (data) {\r\n    /***** Prétraitement des données *****/\r\n    var totalTimeStamp = data.length;\r\n    var color = d3.scaleOrdinal();\r\n    var tooltip = tip().attr(\"class\", \"d3-tip\").offset([-10, 0]);\r\n\r\n    var tipStacked = tip().attr(\"class\", \"d3-tip\").offset([-10, 0]);\r\n\r\n    domainColor(color, states);\r\n    convertSource(data);\r\n\r\n    var sources = createSources(data, states, statesOrder);\r\n\r\n    //For visualisation 3\r\n    var totalStagesPortion = calculateStagesPortion(data, states, statesOrder);\r\n    var firstStagesIndex = findFirstStageIndex(sources);\r\n\r\n    domainX(x, data);\r\n    domainY(y, statesOrder);\r\n\r\n    /***** Création du graphique Stacked bar chart *****/\r\n    createStackedBarChart(gBarChart, sources, x, color, tooltip, barHeight);\r\n    if (useTransitions) {\r\n      var gSecondBarChart = g\r\n        .append(\"g\")\r\n        .attr(\r\n          \"transform\",\r\n          \"translate(\" + margin.left + \",\" + (2 * margin.top + barHeight) + \")\"\r\n        );\r\n\r\n      var gThirdBarChart = g\r\n        .append(\"g\")\r\n        .attr(\r\n          \"transform\",\r\n          \"translate(\" + margin.left + \",\" + (3 * margin.top + 2 *barHeight) + \")\"\r\n        );\r\n\r\n      transitions = addTransitions(\r\n        gBarChart,\r\n        gSecondBarChart,\r\n        gThirdBarChart,\r\n        sources,\r\n        color,\r\n        translationHeight,\r\n        barHeight,\r\n        width,\r\n        tipStacked,\r\n        xAxis,\r\n        yAxis,\r\n        firstStagesIndex,\r\n        totalStagesPortion,\r\n        totalTimeStamp\r\n      );\r\n    }\r\n    // Axes\r\n    gBarChart\r\n      .append(\"g\")\r\n      .attr(\"class\", \"x axis\")\r\n      .attr(\"transform\", \"translate(0,\" + barHeight + \")\")\r\n      .call(xAxis);\r\n\r\n    //get tick\r\n    d3.selectAll(\".tick\").select(\"text\").style(\"font-weight\", 540);\r\n\r\n    /***** Création de l'infobulle *****/\r\n    tooltip.html(function (d) {\r\n      return getToolTipText.call(this, d);\r\n    });\r\n    g.call(tooltip);\r\n\r\n    tipStacked.html(function (d) {\r\n      return getStackedToolTipText.call(\r\n        this,\r\n        d,\r\n        totalStagesPortion,\r\n        totalTimeStamp\r\n      );\r\n    });\r\n    g.call(tipStacked);\r\n\r\n    /***** Création de la légende *****/\r\n    barLegend(g, states, color);\r\n  });\r\n  return transitions;\r\n};\r\n","import * as d3 from \"d3\";\r\nimport { initSpectrogram } from \"./initSpectrogram\";\r\nimport { initializeBarChart } from \"../bar_chart/initBarChart\";\r\n\r\nconst createSpectrogram = (countainerNode) => {\r\n  /***** Configuration *****/\r\n\r\n  /*** Dimensions ***/\r\n  const margin = {\r\n    top: 100,\r\n    right: 200,\r\n    bottom: 50,\r\n    left: 70\r\n  };\r\n\r\n  var canvasWidth = 1000\r\n  var canvisHeight = 1200\r\n  var barCanvasHeight = canvisHeight / 6;\r\n  var spectroCanvasHeight = (canvisHeight - barCanvasHeight) / 2;\r\n\r\n  var width = canvasWidth - margin.left - margin.right;\r\n  var spectroHeight = spectroCanvasHeight - margin.top - margin.bottom;\r\n  var barHeight = barCanvasHeight - margin.top;\r\n\r\n  /***** Création des éléments *****/\r\n  var svg = d3.select(countainerNode);\r\n\r\n  svg\r\n    .attr(\"width\", canvasWidth)\r\n    .attr(\"height\", 2 * spectroCanvasHeight + barCanvasHeight);\r\n\r\n  var barChart = svg\r\n    .append(\"g\")\r\n    .attr(\"width\", canvasWidth)\r\n    .attr(\"height\", barCanvasHeight);\r\n\r\n  var spectrogramFPZ = svg\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(0,\" + barCanvasHeight + \")\")\r\n    .attr(\"width\", canvasWidth)\r\n    .attr(\"height\", spectroCanvasHeight);\r\n\r\n  var spectrogramPZ = svg\r\n    .append(\"g\")\r\n    .attr(\r\n      \"transform\",\r\n      \"translate(0,\" + (barCanvasHeight + spectroCanvasHeight) + \")\"\r\n    )\r\n    .attr(\"width\", canvasWidth)\r\n    .attr(\"height\", spectroCanvasHeight);\r\n\r\n  initializeBarChart(barChart, width, barHeight, margin, false);\r\n  initSpectrogram(spectrogramFPZ, \"Fpz_Cz\", width, spectroHeight, margin);\r\n  initSpectrogram(spectrogramPZ, \"Pz_Oz\", width, spectroHeight, margin);\r\n};\r\n\r\nexport default createSpectrogram;\r\n","import * as d3 from \"d3\";\r\nimport { initializeBarChart } from \"./initBarChart\";\r\n\r\nconst createBarChart = (countainerNode) => {\r\n    /***** Configuration *****/\r\n    /*** Dimensions ***/\r\n    const margin = {\r\n      top: 100,\r\n      right: 70,\r\n      bottom: 50,\r\n      left: 70\r\n    };\r\n\r\n    var canvasWidth = 1000\r\n    var barCanvasHeight = 600\r\n  \r\n    var width = canvasWidth - margin.left - margin.right;\r\n    var barHeight = barCanvasHeight - margin.top - margin.bottom;\r\n  \r\n    /***** Création des éléments *****/\r\n    const svg = d3.select(countainerNode)\r\n    \r\n    svg.attr(\"width\", canvasWidth)\r\n      .attr(\"height\", barCanvasHeight);\r\n    \r\n    var barChart = svg.append(\"svg\")\r\n        .attr(\"width\", canvasWidth)\r\n        .attr(\"height\", barCanvasHeight);\r\n\r\n    return initializeBarChart(barChart, width, barHeight, margin);\r\n  }\r\n\r\n  export default createBarChart\r\n  ","import React from \"react\";\r\nimport { Container, Card, CardBody } from \"reactstrap\";\r\nimport { Waypoint } from 'react-waypoint';\r\n\r\nimport D3Component from \"../../components/d3component\";\r\n\r\nimport { firstCallback,secondCallback, thirdCallback, fourthCallback, fifthCallback} from \"../../d3/bar_chart/transition\";\r\nimport createBarChart from \"../../d3/bar_chart/barChart\";\r\n\r\nconst StackedBarChartScrollyTelling = () => {\r\n  return (\r\n    <Container>\r\n      <div style={{ position: \"sticky\", top: \"10%\"}}>\r\n        <D3Component callback={createBarChart} />\r\n      </div>\r\n      <div style={{\"marginBottom\": \"50%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            We can see that each colored block represents a part of your night. They are ordered from bed time to out of bed timestamps you’ve written in your journal. Each color is associated with a specific sleep stage.\r\n            You went to bed at 12:22 am and you got out of bed at 9:47 am, which adds up to 9 hours and 25 minutes of time spent in bed. Of this total time, you spent 7 hours and 27 minutes actually sleeping.\r\n            You first fell asleep at XX:XX, to which we will refer to as sleep onset. The last non wake block ended at XX:XX, which can also be referred to as sleep offset. During that night's sleep, you went through each of the 5 five stages. Let's try to see a little better what happened about each of them.\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Waypoint onEnter={() => {firstCallback()}} />\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            Wake stage is of course the stage we want to minimize when in bed. It can be decomposed into two parts:\r\n          </p>\r\n          <ul>\r\n            <li> Sleep latency : Time spent before falling asleep, which corresponds to X minutes in your case. </li>\r\n            <li> Wake after sleep onset (WASO): Time spent awake after first falling asleep and before waking up. </li>\r\n            <li> For healthy adults, it is normal to experience small awakenings during the night. Unprovoked awakenings are mostly during or after REM stages. </li>\r\n          </ul>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            <strong>REM stage</strong> stands for “Rapid Eyes Movements” and is also known as “paradoxical sleep”. It is associated with dreaming and, as the National Sleep Foundation says, <strong>“the brain is awake and body paralyzed.”</strong>\r\n          </p>\r\n          <p>\r\n            <strong>N1 stage</strong> is associated with that drowsy feeling before falling asleep. Most people wouldn’t say they fell asleep if they’ve been woken up from N1 sleep.\r\n          </p>\r\n          <p>\r\n            <strong>N2 stage</strong> still corresponds to a light sleep, but where the muscle activity decreases more, and the eyes have stopped moving. It is called, along with N1, <strong>light sleep</strong>.\r\n          </p>\r\n          <p>\r\n            <strong>N3 stage</strong> is when you are deeply asleep, hence it’s also called <strong>deep sleep</strong>, or sometimes <strong>slow wave</strong> sleep, and is the most difficult to wake up from. It is during those stages that your cells get repaired, and that tissue grows. But how much time did you spend in each stage during the whole night?\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Waypoint onEnter={() => {secondCallback()}} />\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            From here, we can look at your sleep efficiency, which is the proportion of time spent asleep over the overall time spent in bed. In your case, it corresponds to 79%, or 7h27.\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            We are currently looking at your in bed sleep stage proportions. Wake time may be overrepresented, because it includes your sleep latency and the time you spent in bed after waking up. In order to look at your actual stage proportions, we must cut them out from wake time to only keep WASO.\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>\r\n            We can see that the most prominent sleep stage is N2, which in your case corresponds to XXXX. How does your night compare to other people’s night?\r\n          </p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Waypoint onEnter={() => {thirdCallback()}} />\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Card className=\"shadow\"  style={{ position: \"relative\"}}>\r\n        <CardBody>\r\n          <p>As a rule of thumb, adults approximately stay 5% of their total sleep time in N1; 50% in N2; and 20% is in N3. The remaining 25% is REM stage sleep.</p>\r\n        </CardBody>\r\n      </Card>\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Waypoint onEnter={() => {fourthCallback()}} />\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      <Waypoint onEnter={() => {fifthCallback()}} />\r\n      <div style={{\"marginBottom\": \"125%\"}}/>\r\n      .{/*For now, don't touch this dot!!!*/}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default StackedBarChartScrollyTelling;","import React from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport Navbar from \"../../components/navbar/navbar\";\r\nimport Header from \"../../components/header\";\r\nimport Footer from \"../../components/footer/footer\";\r\nimport D3Component from \"../../components/d3component\";\r\nimport WIPWarning from \"../../components/wip_warning\";\r\n\r\nimport { createSingleHypnogram } from \"../../d3/hypnogram/hypnogram\";\r\n\r\nimport text from \"./text.json\";\r\nimport createSpectrogram from \"../../d3/spectrogram/spectrogram\";\r\nimport StackedBarChartScrollyTelling from \"./stacked_bar_chart_scrollytelling\";\r\n\r\nconst SleepAnalysis = () => {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Header\r\n        sizeClass={\"pb-150\"}\r\n        shapeQty={7}\r\n        title={text[\"header_title\"]}\r\n        subtitle={text[\"header_subtitle\"]}\r\n        description={text[\"header_description\"]}\r\n      />\r\n      <Container className=\"mt-5 mb-5 text-justify\">\r\n        <Row className=\"mb-5 justify-content-center\">\r\n          <WIPWarning />\r\n        </Row>\r\n        <p>\r\n          Of course, we are analyzing only one night of sleep so it is therefore tricky to draw general conclusions about your sleep. It is however fascinating to see how your night was.\r\n        </p>\r\n        <p>\r\n          Without further ado, this is what was your night of sleep:\r\n        </p>\r\n        <StackedBarChartScrollyTelling />\r\n        <p>\r\n          We have seen that sleep can be decomposed in mainly two stages, whereas REM and NREM, and that we can observe different stage proportions across age, gender and different sleep disorders. We’ve also defined other measures of your sleep architecture, such as your sleep latency, efficiency and total sleep time. In order to improve your sleep hygiene, many elements can be considered:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            Alimentation: having a balanced diet and avoiding sources of caffeine can have a positive impact on one’s sleep. Chocolate, soft drink, tea and decaffeinated coffee are unexpected sources of caffeine.\r\n          </li>\r\n          <li>\r\n            Routine: going to sleep about at the same time, in a darkened and quiet environment.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          Although we’ve looked at many aspects of your night’s sleep, we haven’t properly looked at your sleep dynamics, whereas how your sleep evolves overnight.\r\n        </p>\r\n        <h4>Hypnogram</h4>\r\n        <p>\r\n          A hypnogram allows you to visually inspect the evolution of your night, through time. The vertical axis represents how hard it is to wake up, namely the sleep deepness.\r\n          We see that REM is one of the lightest sleep stages (along with N1), because we unknowingly wake up from that stage. Those short periods of arousal often last no longer than 15 seconds, are followed by a lighter sleep stage, and cannot be remembered the next morning. If they are too frequent, they can affect your sleep quality. [5]\r\n          We can see that, throughout the night, stages follow about the same pattern, whereas we go from NREM (either N1, N2 and N3) and then to REM, and so on. We call those sleep cycles, and those typically range from four to six, each one lasting from 90 to 110 minutes.\r\n          Another commonly looked at measurement is the time between sleep onset and the first REM epoch, namely REM latency, which corresponds to 20 minutes.\r\n        </p>\r\n        <D3Component callback={createSingleHypnogram} />\r\n        <p>\r\n          Sleep cycles take place in a broader process, named the circadian rhythm. It is the one that regulates our wake and sleep cycles over a 24 hours period.\r\n        </p>\r\n        <p>\r\n          You’ve been able to visualize and inspect your night of sleep, which we’ve classified only based on your EEG recordings. In a sleep lab, electrophysiology technicians generally look at your EEG, EOG and submental EMG, and then manually classify each epoch of 30 seconds that compose your night. By looking at your EEG recordings, we can see some patterns that can help electrophysiology technicians, and our classifier, discriminate sleep stages throughout the night.\r\n        </p>\r\n        <h4 className=\"mt-5\">Spectrogram</h4>\r\n        <p>\r\n          Above, we can see the same chart from the first visualization, which represents your sleep stages through the night. Below it, there are spectrograms of both your EEG channels. Spectrograms can be viewed as if we took all of your nights signal, we’ve separated it in contiguous 30 seconds chunks, stacked then horizontally and to which we’ve applied the fast fourier transform. We then have, for each 30 seconds epoch, the corresponding amplitudes for each frequency that makes up the signal, hence the spectra. We then converted the scale to logarithmic, to better see the differences in the spectrums. We then speak of signal power instead of signal amplitude, because we look at the spectrums in a logarithmic scale.\r\n        </p>\r\n        <p><strong>How to read it?</strong></p>\r\n        <p>Red therefore means that in that 30 seconds time frame, that particular frequency had a big amplitude. Green means that you had that frequency with a lower amplitude. Dark blue means that you didn’t have that frequency in the signal.</p>\r\n        <p>To get a better understanding at how spectrograms work, you can check out\r\n          <a\r\n            href=\"https://musiclab.chromeexperiments.com/Spectrogram/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" \"}this visualization{\" \"}\r\n          </a>\r\n          that decomposes sound frequency from your microphone.\r\n        </p>\r\n        <D3Component callback={createSpectrogram} />\r\n        <p className=\"mt-5\">Generally, when talking about brain waves, we group certain frequencies together into bands.  There are overall five frequency bands, where each has a general associated behaviour, or state of mind. We will cover those when looking at time frames corresponding to each sleep stage.</p>\r\n        <p>\r\n          We can associate wake stages with low-amplitude activity in the 15 to 60 Hz frequency range, called the beta band.{\" \"}\r\n          By slowly falling asleep, the signal frequencies tend to decrease into the 4 to 8 Hz range, or the theta band, and to have larger amplitudes. These characteristics are associated with N1.{\" \"}\r\n          N2 stage has the same characteristics, and also includes sleep spindles. They last only a few seconds and are a large oscillation in the 10 to 15 hz band. Because they do not occur during all of the 30 seconds period, they cannot be seen here.{\" \"}\r\n          Stage N3, also called slow wave sleep, is characterized by slower waves between 0.5 and 4 Hz, known as the delta range, with large amplitudes.{\" \"}\r\n          REM stage has the same characteristics as Wake stage, whereas there are low voltage high frequency activity.\r\n        </p>\r\n        <p>Wanna know how accurate this data is?</p>\r\n        <Button\r\n          color=\"default\"\r\n          to=\"/performance\"\r\n          tag={Link}\r\n        >\r\n          Check out the performances\r\n        </Button>\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SleepAnalysis;","import React from \"react\";\r\nimport { Container, Row, Table } from \"reactstrap\";\r\n\r\nimport Navbar from \"../../components/navbar/navbar\";\r\nimport Header from \"../../components/header\";\r\nimport WIPWarning from \"../../components/wip_warning\";\r\nimport Footer from \"../../components/footer/footer\";\r\nimport D3Component from \"../../components/d3component\";\r\n\r\nimport text from \"./text.json\";\r\nimport { createComparativeHypnogram } from \"d3/hypnogram/hypnogram\";\r\n\r\nconst ClassificationReport = ({ rows }) => {\r\n  return (\r\n    <Table size=\"sm\" responsive>\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th>Precision (%)</th>\r\n          <th>Recall (%)</th>\r\n          <th>F1-Score (%)</th>\r\n          <th>Support</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rows.map((row, i) => {\r\n          return (\r\n            <tr key={i}>\r\n              <th>{row[0]}</th>\r\n              {row.slice(1).map((el, j) => (\r\n                <td key={j}>{el}</td>\r\n              ))}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nconst Performance = () => {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Header\r\n        sizeClass={\"pb-100\"}\r\n        shapeQty={7}\r\n        title={text[\"header_title\"]}\r\n        subtitle={text[\"header_subtitle\"]}\r\n        description={text[\"header_description\"]}\r\n      />\r\n      <Container className=\"mt-5 text-justify\">\r\n        <Row className=\"mb-5 justify-content-center\">\r\n          <WIPWarning />\r\n        </Row>\r\n        <p>\r\n          Ever wonder what is the value of this application? This page aims to\r\n          illustrate the relative performance of our sleep scoring compared to\r\n          clinical hypnogram scoring (which is usually considered the\r\n          state-of-the-art technique).\r\n        </p>\r\n        <p>\r\n          <strong>Here is the plan:</strong>\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            First, we will check how our classifier’s scoring agrees with the\r\n            scoring within the Physionet's Sleep-EDF dataset. Of course, we will\r\n            perform this agreement test on a subset of EEG data that was never\r\n            trained on. This subset is composed of full nights of sleep coming\r\n            from five subject of a different age group.{\" \"}\r\n          </li>\r\n          <li>\r\n            Then, we will check how this classifier performs on a full night\r\n            recorded on one of our members. In order to be able to make\r\n            comparisons, we ask for the help of a medical electrophysiologist to\r\n            score our data. This manual scoring will serve as reference to get\r\n            an idea of the accuracy of our model on data acquired using an\r\n            OpenBCI under non-clinical conditions. The AASM manual was used for\r\n            scoring.\r\n          </li>\r\n          <li>\r\n            Finally, we will present the scoring differences between the medical\r\n            electrophysiologist and Sleep-EDF. To do this, we will take a random\r\n            night in our dataset. This will allow us to qualify somewhat the\r\n            previous results and maybe get an idea of the usual disagreement\r\n            level between professional scorers.\r\n          </li>\r\n        </ul>\r\n        <h3 className=\"mt-5\">Classifier's accuracy according to Sleep-EDF</h3>\r\n        <D3Component callback={(svg) => createComparativeHypnogram(svg, [\"Classifier\", \"Sleep-EDF\"])} />\r\n        <ClassificationReport\r\n          rows={[\r\n            [\"W\", 92, 93, 92, 242],\r\n            [\"REM\", 56, 50, 52, 86],\r\n            [\"N1\", 80, 82, 70, 32],\r\n            [\"N2\", 75, 72, 23, 368],\r\n            [\"N3\", 96, 97, 96, 68],\r\n            [\"Accuracy\", \"\", \"\", 82, 796]\r\n          ]}\r\n        />\r\n        <h3 className=\"mt-5\">\r\n          Classifier's accuracy according to the electrophysiologist\r\n        </h3>\r\n        <D3Component callback={(svg) => createComparativeHypnogram(svg, [\"Classifier\", \"Electrophysiologist\"])} />\r\n        <ClassificationReport\r\n          rows={[\r\n            [\"W\", 85, 93, 92, 304],\r\n            [\"REM\", 52, 50, 52, 83],\r\n            [\"N1\", 76, 80, 78, 37],\r\n            [\"N2\", 75, 60, 68, 366],\r\n            [\"N3\", 92, 93, 92, 65],\r\n            [\"Accuracy\", \"\", \"\", 74, 842]\r\n          ]}\r\n        />\r\n        <h3 className=\"mt-5\">Electrophysiologist and Sleep-EDF's agreement</h3>\r\n        <D3Component callback={(svg) => createComparativeHypnogram(svg, [\"Electrophysiologist\", \"Sleep-EDF\"])} />\r\n        <ClassificationReport\r\n          rows={[\r\n            [\"W\", 92, 93, 92, 304],\r\n            [\"REM\", 56, 50, 52, 83],\r\n            [\"N1\", 74, 72, 73, 37],\r\n            [\"N2\", 70, 64, 67, 366],\r\n            [\"N3\", 89, 87, 87, 65],\r\n            [\"Accuracy\", \"\", \"\", 73, 842]\r\n          ]}\r\n        />\r\n      </Container>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Performance;\r\n","import React from \"react\";\r\nimport { withRouter, } from \"react-router-dom\";\r\n\r\n\r\nclass ScrollToTop extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location.pathname !== prevProps.location.pathname) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport \"assets/vendor/nucleo/css/nucleo.css\";\r\nimport \"assets/vendor/font-awesome/css/font-awesome.min.css\";\r\nimport \"assets/scss/argon-design-system-react.scss?v1.1.0\";\r\nimport \"assets/css/visualisation.css\";\r\n\r\nimport SleepAnalysis from \"views/sleep_analysis/sleep_analysis\";\r\nimport Performance from \"views/performance/performance\";\r\nimport ScrollToTop from \"components/scroll_to_top\";\r\nimport Emoji from \"components/emoji\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <ScrollToTop>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <SleepAnalysis />} />\r\n        <Route exact path=\"/record-my-sleep\" render={() => <h1 className=\"\">Under Construction... <Emoji symbol=\"🏗️\" /></h1>} />\r\n        <Route exact path=\"/analyze-my-sleep\" render={() => <SleepAnalysis />} />\r\n        <Route exact path=\"/performance\" render={() => <Performance />} />\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </ScrollToTop>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/hypnogram.3c793400.csv\";"],"sourceRoot":""}